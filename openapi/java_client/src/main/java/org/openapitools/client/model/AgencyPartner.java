/*
 * Agency
 * Manage Agency Information 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.LanguageMapper;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List of Partners in the Agency
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-07T11:28:29.734525700+05:30[Asia/Calcutta]")
public class AgencyPartner {
  public static final String SERIALIZED_NAME_PARTNER_NO = "partnerNo";
  @SerializedName(SERIALIZED_NAME_PARTNER_NO)
  private String partnerNo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private LanguageMapper name;

  public static final String SERIALIZED_NAME_EMIRATES_ID = "emiratesId";
  @SerializedName(SERIALIZED_NAME_EMIRATES_ID)
  private String emiratesId;

  public static final String SERIALIZED_NAME_PASSPORT_NUMBER = "passportNumber";
  @SerializedName(SERIALIZED_NAME_PASSPORT_NUMBER)
  private String passportNumber;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private String birthDate;

  public static final String SERIALIZED_NAME_PERSON_CATEGORY = "personCategory";
  @SerializedName(SERIALIZED_NAME_PERSON_CATEGORY)
  private String personCategory;

  public static final String SERIALIZED_NAME_LEGAL_TYPE = "legalType";
  @SerializedName(SERIALIZED_NAME_LEGAL_TYPE)
  private String legalType;

  public static final String SERIALIZED_NAME_PERCENT_OWNERSHIP = "percentOwnership";
  @SerializedName(SERIALIZED_NAME_PERCENT_OWNERSHIP)
  private Integer percentOwnership;

  public static final String SERIALIZED_NAME_RESIDENCE_NUMBER = "residenceNumber";
  @SerializedName(SERIALIZED_NAME_RESIDENCE_NUMBER)
  private String residenceNumber;

  public static final String SERIALIZED_NAME_EFFECTIVE_START_DATE = "effectiveStartDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_START_DATE)
  private OffsetDateTime effectiveStartDate;

  public static final String SERIALIZED_NAME_EFFECTIVE_END_DATE = "effectiveEndDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_END_DATE)
  private OffsetDateTime effectiveEndDate;

  public AgencyPartner() {
  }

  public AgencyPartner partnerNo(String partnerNo) {
    
    this.partnerNo = partnerNo;
    return this;
  }

   /**
   * Partner Number
   * @return partnerNo
  **/
  @javax.annotation.Nullable
  public String getPartnerNo() {
    return partnerNo;
  }


  public void setPartnerNo(String partnerNo) {
    this.partnerNo = partnerNo;
  }


  public AgencyPartner name(LanguageMapper name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public LanguageMapper getName() {
    return name;
  }


  public void setName(LanguageMapper name) {
    this.name = name;
  }


  public AgencyPartner emiratesId(String emiratesId) {
    
    this.emiratesId = emiratesId;
    return this;
  }

   /**
   * Emirtates ID
   * @return emiratesId
  **/
  @javax.annotation.Nullable
  public String getEmiratesId() {
    return emiratesId;
  }


  public void setEmiratesId(String emiratesId) {
    this.emiratesId = emiratesId;
  }


  public AgencyPartner passportNumber(String passportNumber) {
    
    this.passportNumber = passportNumber;
    return this;
  }

   /**
   * Passport Number
   * @return passportNumber
  **/
  @javax.annotation.Nullable
  public String getPassportNumber() {
    return passportNumber;
  }


  public void setPassportNumber(String passportNumber) {
    this.passportNumber = passportNumber;
  }


  public AgencyPartner nationality(String nationality) {
    
    this.nationality = nationality;
    return this;
  }

   /**
   * Nationality of the Partner
   * @return nationality
  **/
  @javax.annotation.Nullable
  public String getNationality() {
    return nationality;
  }


  public void setNationality(String nationality) {
    this.nationality = nationality;
  }


  public AgencyPartner birthDate(String birthDate) {
    
    this.birthDate = birthDate;
    return this;
  }

   /**
   * Date of Birth
   * @return birthDate
  **/
  @javax.annotation.Nullable
  public String getBirthDate() {
    return birthDate;
  }


  public void setBirthDate(String birthDate) {
    this.birthDate = birthDate;
  }


  public AgencyPartner personCategory(String personCategory) {
    
    this.personCategory = personCategory;
    return this;
  }

   /**
   * Category of the Person
   * @return personCategory
  **/
  @javax.annotation.Nullable
  public String getPersonCategory() {
    return personCategory;
  }


  public void setPersonCategory(String personCategory) {
    this.personCategory = personCategory;
  }


  public AgencyPartner legalType(String legalType) {
    
    this.legalType = legalType;
    return this;
  }

   /**
   * Legal Type of the Partner
   * @return legalType
  **/
  @javax.annotation.Nullable
  public String getLegalType() {
    return legalType;
  }


  public void setLegalType(String legalType) {
    this.legalType = legalType;
  }


  public AgencyPartner percentOwnership(Integer percentOwnership) {
    
    this.percentOwnership = percentOwnership;
    return this;
  }

   /**
   * Ownership Percentage
   * @return percentOwnership
  **/
  @javax.annotation.Nullable
  public Integer getPercentOwnership() {
    return percentOwnership;
  }


  public void setPercentOwnership(Integer percentOwnership) {
    this.percentOwnership = percentOwnership;
  }


  public AgencyPartner residenceNumber(String residenceNumber) {
    
    this.residenceNumber = residenceNumber;
    return this;
  }

   /**
   * Residence Number
   * @return residenceNumber
  **/
  @javax.annotation.Nullable
  public String getResidenceNumber() {
    return residenceNumber;
  }


  public void setResidenceNumber(String residenceNumber) {
    this.residenceNumber = residenceNumber;
  }


  public AgencyPartner effectiveStartDate(OffsetDateTime effectiveStartDate) {
    
    this.effectiveStartDate = effectiveStartDate;
    return this;
  }

   /**
   * Effective Start Date
   * @return effectiveStartDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEffectiveStartDate() {
    return effectiveStartDate;
  }


  public void setEffectiveStartDate(OffsetDateTime effectiveStartDate) {
    this.effectiveStartDate = effectiveStartDate;
  }


  public AgencyPartner effectiveEndDate(OffsetDateTime effectiveEndDate) {
    
    this.effectiveEndDate = effectiveEndDate;
    return this;
  }

   /**
   * Effective End Date
   * @return effectiveEndDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEffectiveEndDate() {
    return effectiveEndDate;
  }


  public void setEffectiveEndDate(OffsetDateTime effectiveEndDate) {
    this.effectiveEndDate = effectiveEndDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgencyPartner agencyPartner = (AgencyPartner) o;
    return Objects.equals(this.partnerNo, agencyPartner.partnerNo) &&
        Objects.equals(this.name, agencyPartner.name) &&
        Objects.equals(this.emiratesId, agencyPartner.emiratesId) &&
        Objects.equals(this.passportNumber, agencyPartner.passportNumber) &&
        Objects.equals(this.nationality, agencyPartner.nationality) &&
        Objects.equals(this.birthDate, agencyPartner.birthDate) &&
        Objects.equals(this.personCategory, agencyPartner.personCategory) &&
        Objects.equals(this.legalType, agencyPartner.legalType) &&
        Objects.equals(this.percentOwnership, agencyPartner.percentOwnership) &&
        Objects.equals(this.residenceNumber, agencyPartner.residenceNumber) &&
        Objects.equals(this.effectiveStartDate, agencyPartner.effectiveStartDate) &&
        Objects.equals(this.effectiveEndDate, agencyPartner.effectiveEndDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(partnerNo, name, emiratesId, passportNumber, nationality, birthDate, personCategory, legalType, percentOwnership, residenceNumber, effectiveStartDate, effectiveEndDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgencyPartner {\n");
    sb.append("    partnerNo: ").append(toIndentedString(partnerNo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    emiratesId: ").append(toIndentedString(emiratesId)).append("\n");
    sb.append("    passportNumber: ").append(toIndentedString(passportNumber)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    personCategory: ").append(toIndentedString(personCategory)).append("\n");
    sb.append("    legalType: ").append(toIndentedString(legalType)).append("\n");
    sb.append("    percentOwnership: ").append(toIndentedString(percentOwnership)).append("\n");
    sb.append("    residenceNumber: ").append(toIndentedString(residenceNumber)).append("\n");
    sb.append("    effectiveStartDate: ").append(toIndentedString(effectiveStartDate)).append("\n");
    sb.append("    effectiveEndDate: ").append(toIndentedString(effectiveEndDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("partnerNo");
    openapiFields.add("name");
    openapiFields.add("emiratesId");
    openapiFields.add("passportNumber");
    openapiFields.add("nationality");
    openapiFields.add("birthDate");
    openapiFields.add("personCategory");
    openapiFields.add("legalType");
    openapiFields.add("percentOwnership");
    openapiFields.add("residenceNumber");
    openapiFields.add("effectiveStartDate");
    openapiFields.add("effectiveEndDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AgencyPartner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AgencyPartner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgencyPartner is not found in the empty JSON string", AgencyPartner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AgencyPartner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgencyPartner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("partnerNo") != null && !jsonObj.get("partnerNo").isJsonNull()) && !jsonObj.get("partnerNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerNo").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        LanguageMapper.validateJsonObject(jsonObj.getAsJsonObject("name"));
      }
      if ((jsonObj.get("emiratesId") != null && !jsonObj.get("emiratesId").isJsonNull()) && !jsonObj.get("emiratesId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emiratesId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emiratesId").toString()));
      }
      if ((jsonObj.get("passportNumber") != null && !jsonObj.get("passportNumber").isJsonNull()) && !jsonObj.get("passportNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passportNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passportNumber").toString()));
      }
      if ((jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      if ((jsonObj.get("birthDate") != null && !jsonObj.get("birthDate").isJsonNull()) && !jsonObj.get("birthDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthDate").toString()));
      }
      if ((jsonObj.get("personCategory") != null && !jsonObj.get("personCategory").isJsonNull()) && !jsonObj.get("personCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personCategory").toString()));
      }
      if ((jsonObj.get("legalType") != null && !jsonObj.get("legalType").isJsonNull()) && !jsonObj.get("legalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalType").toString()));
      }
      if ((jsonObj.get("residenceNumber") != null && !jsonObj.get("residenceNumber").isJsonNull()) && !jsonObj.get("residenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `residenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("residenceNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgencyPartner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgencyPartner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgencyPartner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgencyPartner.class));

       return (TypeAdapter<T>) new TypeAdapter<AgencyPartner>() {
           @Override
           public void write(JsonWriter out, AgencyPartner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgencyPartner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AgencyPartner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AgencyPartner
  * @throws IOException if the JSON string is invalid with respect to AgencyPartner
  */
  public static AgencyPartner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgencyPartner.class);
  }

 /**
  * Convert an instance of AgencyPartner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

