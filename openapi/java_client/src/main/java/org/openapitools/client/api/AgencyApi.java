/*
 * Agency
 * Manage Agency Information 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Agency;
import org.openapitools.client.model.AgencyRemarks;
import org.openapitools.client.model.AgencyWithDetails;
import org.openapitools.client.model.AgencyWithTransactions;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.SimCard;
import org.openapitools.client.model.SimCardResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AgencyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AgencyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AgencyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for blockAgency
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param agencyDid Agency UID (required)
     * @param request Request (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockAgencyCall(String xIBMClientId, String authorization, String agencyDid, AgencyRemarks request, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/agencies/{agencyDid}/events/block"
            .replace("{" + "agencyDid" + "}", localVarApiClient.escapeString(agencyDid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIBMClientId != null) {
            localVarHeaderParams.put("X-IBM-Client-Id", localVarApiClient.parameterToString(xIBMClientId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xIBMClientSecret != null) {
            localVarHeaderParams.put("X-IBM-Client-Secret", localVarApiClient.parameterToString(xIBMClientSecret));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientIdHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockAgencyValidateBeforeCall(String xIBMClientId, String authorization, String agencyDid, AgencyRemarks request, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIBMClientId' is set
        if (xIBMClientId == null) {
            throw new ApiException("Missing the required parameter 'xIBMClientId' when calling blockAgency(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling blockAgency(Async)");
        }

        // verify the required parameter 'agencyDid' is set
        if (agencyDid == null) {
            throw new ApiException("Missing the required parameter 'agencyDid' when calling blockAgency(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling blockAgency(Async)");
        }

        return blockAgencyCall(xIBMClientId, authorization, agencyDid, request, xIBMClientSecret, _callback);

    }

    /**
     * Block agency
     * Block agency
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param agencyDid Agency UID (required)
     * @param request Request (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public void blockAgency(String xIBMClientId, String authorization, String agencyDid, AgencyRemarks request, String xIBMClientSecret) throws ApiException {
        blockAgencyWithHttpInfo(xIBMClientId, authorization, agencyDid, request, xIBMClientSecret);
    }

    /**
     * Block agency
     * Block agency
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param agencyDid Agency UID (required)
     * @param request Request (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> blockAgencyWithHttpInfo(String xIBMClientId, String authorization, String agencyDid, AgencyRemarks request, String xIBMClientSecret) throws ApiException {
        okhttp3.Call localVarCall = blockAgencyValidateBeforeCall(xIBMClientId, authorization, agencyDid, request, xIBMClientSecret, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Block agency (asynchronously)
     * Block agency
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param agencyDid Agency UID (required)
     * @param request Request (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockAgencyAsync(String xIBMClientId, String authorization, String agencyDid, AgencyRemarks request, String xIBMClientSecret, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockAgencyValidateBeforeCall(xIBMClientId, authorization, agencyDid, request, xIBMClientSecret, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAgency
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAgencyCall(String xIBMClientId, String authorization, String did, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/agencies/{did}"
            .replace("{" + "did" + "}", localVarApiClient.escapeString(did.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIBMClientId != null) {
            localVarHeaderParams.put("X-IBM-Client-Id", localVarApiClient.parameterToString(xIBMClientId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xIBMClientSecret != null) {
            localVarHeaderParams.put("X-IBM-Client-Secret", localVarApiClient.parameterToString(xIBMClientSecret));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientIdHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAgencyValidateBeforeCall(String xIBMClientId, String authorization, String did, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIBMClientId' is set
        if (xIBMClientId == null) {
            throw new ApiException("Missing the required parameter 'xIBMClientId' when calling deleteAgency(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteAgency(Async)");
        }

        // verify the required parameter 'did' is set
        if (did == null) {
            throw new ApiException("Missing the required parameter 'did' when calling deleteAgency(Async)");
        }

        return deleteAgencyCall(xIBMClientId, authorization, did, xIBMClientSecret, _callback);

    }

    /**
     * Delete an agency from TARS
     * Delete an agency from TARS
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public String deleteAgency(String xIBMClientId, String authorization, String did, String xIBMClientSecret) throws ApiException {
        ApiResponse<String> localVarResp = deleteAgencyWithHttpInfo(xIBMClientId, authorization, did, xIBMClientSecret);
        return localVarResp.getData();
    }

    /**
     * Delete an agency from TARS
     * Delete an agency from TARS
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> deleteAgencyWithHttpInfo(String xIBMClientId, String authorization, String did, String xIBMClientSecret) throws ApiException {
        okhttp3.Call localVarCall = deleteAgencyValidateBeforeCall(xIBMClientId, authorization, did, xIBMClientSecret, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an agency from TARS (asynchronously)
     * Delete an agency from TARS
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAgencyAsync(String xIBMClientId, String authorization, String did, String xIBMClientSecret, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAgencyValidateBeforeCall(xIBMClientId, authorization, did, xIBMClientSecret, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAgencyDetails
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAgencyDetailsCall(String xIBMClientId, String authorization, String did, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/agencies/{did}/details"
            .replace("{" + "did" + "}", localVarApiClient.escapeString(did.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIBMClientId != null) {
            localVarHeaderParams.put("X-IBM-Client-Id", localVarApiClient.parameterToString(xIBMClientId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xIBMClientSecret != null) {
            localVarHeaderParams.put("X-IBM-Client-Secret", localVarApiClient.parameterToString(xIBMClientSecret));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientIdHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAgencyDetailsValidateBeforeCall(String xIBMClientId, String authorization, String did, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIBMClientId' is set
        if (xIBMClientId == null) {
            throw new ApiException("Missing the required parameter 'xIBMClientId' when calling retrieveAgencyDetails(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveAgencyDetails(Async)");
        }

        // verify the required parameter 'did' is set
        if (did == null) {
            throw new ApiException("Missing the required parameter 'did' when calling retrieveAgencyDetails(Async)");
        }

        return retrieveAgencyDetailsCall(xIBMClientId, authorization, did, xIBMClientSecret, _callback);

    }

    /**
     * Fetch an agency in TARS
     * Fetch an agency in TARS
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @return AgencyWithDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public AgencyWithDetails retrieveAgencyDetails(String xIBMClientId, String authorization, String did, String xIBMClientSecret) throws ApiException {
        ApiResponse<AgencyWithDetails> localVarResp = retrieveAgencyDetailsWithHttpInfo(xIBMClientId, authorization, did, xIBMClientSecret);
        return localVarResp.getData();
    }

    /**
     * Fetch an agency in TARS
     * Fetch an agency in TARS
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @return ApiResponse&lt;AgencyWithDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AgencyWithDetails> retrieveAgencyDetailsWithHttpInfo(String xIBMClientId, String authorization, String did, String xIBMClientSecret) throws ApiException {
        okhttp3.Call localVarCall = retrieveAgencyDetailsValidateBeforeCall(xIBMClientId, authorization, did, xIBMClientSecret, null);
        Type localVarReturnType = new TypeToken<AgencyWithDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch an agency in TARS (asynchronously)
     * Fetch an agency in TARS
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAgencyDetailsAsync(String xIBMClientId, String authorization, String did, String xIBMClientSecret, final ApiCallback<AgencyWithDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAgencyDetailsValidateBeforeCall(xIBMClientId, authorization, did, xIBMClientSecret, _callback);
        Type localVarReturnType = new TypeToken<AgencyWithDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAgencyMasters
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAgencyMastersCall(String xIBMClientId, String authorization, String did, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/agencies/{did}"
            .replace("{" + "did" + "}", localVarApiClient.escapeString(did.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIBMClientId != null) {
            localVarHeaderParams.put("X-IBM-Client-Id", localVarApiClient.parameterToString(xIBMClientId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xIBMClientSecret != null) {
            localVarHeaderParams.put("X-IBM-Client-Secret", localVarApiClient.parameterToString(xIBMClientSecret));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientIdHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAgencyMastersValidateBeforeCall(String xIBMClientId, String authorization, String did, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIBMClientId' is set
        if (xIBMClientId == null) {
            throw new ApiException("Missing the required parameter 'xIBMClientId' when calling retrieveAgencyMasters(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveAgencyMasters(Async)");
        }

        // verify the required parameter 'did' is set
        if (did == null) {
            throw new ApiException("Missing the required parameter 'did' when calling retrieveAgencyMasters(Async)");
        }

        return retrieveAgencyMastersCall(xIBMClientId, authorization, did, xIBMClientSecret, _callback);

    }

    /**
     * Fetch an agency in TARS
     * Fetch an agency in TARS
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @return Agency
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public Agency retrieveAgencyMasters(String xIBMClientId, String authorization, String did, String xIBMClientSecret) throws ApiException {
        ApiResponse<Agency> localVarResp = retrieveAgencyMastersWithHttpInfo(xIBMClientId, authorization, did, xIBMClientSecret);
        return localVarResp.getData();
    }

    /**
     * Fetch an agency in TARS
     * Fetch an agency in TARS
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @return ApiResponse&lt;Agency&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Agency> retrieveAgencyMastersWithHttpInfo(String xIBMClientId, String authorization, String did, String xIBMClientSecret) throws ApiException {
        okhttp3.Call localVarCall = retrieveAgencyMastersValidateBeforeCall(xIBMClientId, authorization, did, xIBMClientSecret, null);
        Type localVarReturnType = new TypeToken<Agency>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch an agency in TARS (asynchronously)
     * Fetch an agency in TARS
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAgencyMastersAsync(String xIBMClientId, String authorization, String did, String xIBMClientSecret, final ApiCallback<Agency> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAgencyMastersValidateBeforeCall(xIBMClientId, authorization, did, xIBMClientSecret, _callback);
        Type localVarReturnType = new TypeToken<Agency>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAgencyTransactions
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAgencyTransactionsCall(String xIBMClientId, String authorization, String did, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/agencies/{did}/transactions"
            .replace("{" + "did" + "}", localVarApiClient.escapeString(did.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIBMClientId != null) {
            localVarHeaderParams.put("X-IBM-Client-Id", localVarApiClient.parameterToString(xIBMClientId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xIBMClientSecret != null) {
            localVarHeaderParams.put("X-IBM-Client-Secret", localVarApiClient.parameterToString(xIBMClientSecret));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientIdHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAgencyTransactionsValidateBeforeCall(String xIBMClientId, String authorization, String did, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIBMClientId' is set
        if (xIBMClientId == null) {
            throw new ApiException("Missing the required parameter 'xIBMClientId' when calling retrieveAgencyTransactions(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveAgencyTransactions(Async)");
        }

        // verify the required parameter 'did' is set
        if (did == null) {
            throw new ApiException("Missing the required parameter 'did' when calling retrieveAgencyTransactions(Async)");
        }

        return retrieveAgencyTransactionsCall(xIBMClientId, authorization, did, xIBMClientSecret, _callback);

    }

    /**
     * Fetch an agency by ID
     * Fetch an agency by Id
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @return AgencyWithTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public AgencyWithTransactions retrieveAgencyTransactions(String xIBMClientId, String authorization, String did, String xIBMClientSecret) throws ApiException {
        ApiResponse<AgencyWithTransactions> localVarResp = retrieveAgencyTransactionsWithHttpInfo(xIBMClientId, authorization, did, xIBMClientSecret);
        return localVarResp.getData();
    }

    /**
     * Fetch an agency by ID
     * Fetch an agency by Id
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @return ApiResponse&lt;AgencyWithTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AgencyWithTransactions> retrieveAgencyTransactionsWithHttpInfo(String xIBMClientId, String authorization, String did, String xIBMClientSecret) throws ApiException {
        okhttp3.Call localVarCall = retrieveAgencyTransactionsValidateBeforeCall(xIBMClientId, authorization, did, xIBMClientSecret, null);
        Type localVarReturnType = new TypeToken<AgencyWithTransactions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch an agency by ID (asynchronously)
     * Fetch an agency by Id
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAgencyTransactionsAsync(String xIBMClientId, String authorization, String did, String xIBMClientSecret, final ApiCallback<AgencyWithTransactions> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAgencyTransactionsValidateBeforeCall(xIBMClientId, authorization, did, xIBMClientSecret, _callback);
        Type localVarReturnType = new TypeToken<AgencyWithTransactions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unblockAgency
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param agencyDid Agency UID (required)
     * @param request Request (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unblockAgencyCall(String xIBMClientId, String authorization, String agencyDid, AgencyRemarks request, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/agencies/{agencyDid}/events/unblock"
            .replace("{" + "agencyDid" + "}", localVarApiClient.escapeString(agencyDid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIBMClientId != null) {
            localVarHeaderParams.put("X-IBM-Client-Id", localVarApiClient.parameterToString(xIBMClientId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xIBMClientSecret != null) {
            localVarHeaderParams.put("X-IBM-Client-Secret", localVarApiClient.parameterToString(xIBMClientSecret));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientIdHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unblockAgencyValidateBeforeCall(String xIBMClientId, String authorization, String agencyDid, AgencyRemarks request, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIBMClientId' is set
        if (xIBMClientId == null) {
            throw new ApiException("Missing the required parameter 'xIBMClientId' when calling unblockAgency(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling unblockAgency(Async)");
        }

        // verify the required parameter 'agencyDid' is set
        if (agencyDid == null) {
            throw new ApiException("Missing the required parameter 'agencyDid' when calling unblockAgency(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling unblockAgency(Async)");
        }

        return unblockAgencyCall(xIBMClientId, authorization, agencyDid, request, xIBMClientSecret, _callback);

    }

    /**
     * Unblock agency
     * Unblock agency
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param agencyDid Agency UID (required)
     * @param request Request (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public void unblockAgency(String xIBMClientId, String authorization, String agencyDid, AgencyRemarks request, String xIBMClientSecret) throws ApiException {
        unblockAgencyWithHttpInfo(xIBMClientId, authorization, agencyDid, request, xIBMClientSecret);
    }

    /**
     * Unblock agency
     * Unblock agency
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param agencyDid Agency UID (required)
     * @param request Request (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unblockAgencyWithHttpInfo(String xIBMClientId, String authorization, String agencyDid, AgencyRemarks request, String xIBMClientSecret) throws ApiException {
        okhttp3.Call localVarCall = unblockAgencyValidateBeforeCall(xIBMClientId, authorization, agencyDid, request, xIBMClientSecret, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unblock agency (asynchronously)
     * Unblock agency
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param agencyDid Agency UID (required)
     * @param request Request (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unblockAgencyAsync(String xIBMClientId, String authorization, String agencyDid, AgencyRemarks request, String xIBMClientSecret, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unblockAgencyValidateBeforeCall(xIBMClientId, authorization, agencyDid, request, xIBMClientSecret, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAgency
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param updateAgency  (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAgencyCall(String xIBMClientId, String authorization, String did, Agency updateAgency, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAgency;

        // create path and map variables
        String localVarPath = "/agencies/{did}"
            .replace("{" + "did" + "}", localVarApiClient.escapeString(did.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIBMClientId != null) {
            localVarHeaderParams.put("X-IBM-Client-Id", localVarApiClient.parameterToString(xIBMClientId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xIBMClientSecret != null) {
            localVarHeaderParams.put("X-IBM-Client-Secret", localVarApiClient.parameterToString(xIBMClientSecret));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientIdHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAgencyValidateBeforeCall(String xIBMClientId, String authorization, String did, Agency updateAgency, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIBMClientId' is set
        if (xIBMClientId == null) {
            throw new ApiException("Missing the required parameter 'xIBMClientId' when calling updateAgency(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateAgency(Async)");
        }

        // verify the required parameter 'did' is set
        if (did == null) {
            throw new ApiException("Missing the required parameter 'did' when calling updateAgency(Async)");
        }

        // verify the required parameter 'updateAgency' is set
        if (updateAgency == null) {
            throw new ApiException("Missing the required parameter 'updateAgency' when calling updateAgency(Async)");
        }

        return updateAgencyCall(xIBMClientId, authorization, did, updateAgency, xIBMClientSecret, _callback);

    }

    /**
     * Update an agency in TARS
     * Update an agency in TARS
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param updateAgency  (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @return Agency
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public Agency updateAgency(String xIBMClientId, String authorization, String did, Agency updateAgency, String xIBMClientSecret) throws ApiException {
        ApiResponse<Agency> localVarResp = updateAgencyWithHttpInfo(xIBMClientId, authorization, did, updateAgency, xIBMClientSecret);
        return localVarResp.getData();
    }

    /**
     * Update an agency in TARS
     * Update an agency in TARS
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param updateAgency  (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @return ApiResponse&lt;Agency&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Agency> updateAgencyWithHttpInfo(String xIBMClientId, String authorization, String did, Agency updateAgency, String xIBMClientSecret) throws ApiException {
        okhttp3.Call localVarCall = updateAgencyValidateBeforeCall(xIBMClientId, authorization, did, updateAgency, xIBMClientSecret, null);
        Type localVarReturnType = new TypeToken<Agency>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an agency in TARS (asynchronously)
     * Update an agency in TARS
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param updateAgency  (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAgencyAsync(String xIBMClientId, String authorization, String did, Agency updateAgency, String xIBMClientSecret, final ApiCallback<Agency> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAgencyValidateBeforeCall(xIBMClientId, authorization, did, updateAgency, xIBMClientSecret, _callback);
        Type localVarReturnType = new TypeToken<Agency>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAgencyContacts
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAgencyContactsCall(String xIBMClientId, String authorization, String did, String xIBMClientSecret, Contact requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/agencies/{did}/contacts"
            .replace("{" + "did" + "}", localVarApiClient.escapeString(did.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIBMClientId != null) {
            localVarHeaderParams.put("X-IBM-Client-Id", localVarApiClient.parameterToString(xIBMClientId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xIBMClientSecret != null) {
            localVarHeaderParams.put("X-IBM-Client-Secret", localVarApiClient.parameterToString(xIBMClientSecret));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientIdHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAgencyContactsValidateBeforeCall(String xIBMClientId, String authorization, String did, String xIBMClientSecret, Contact requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIBMClientId' is set
        if (xIBMClientId == null) {
            throw new ApiException("Missing the required parameter 'xIBMClientId' when calling updateAgencyContacts(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateAgencyContacts(Async)");
        }

        // verify the required parameter 'did' is set
        if (did == null) {
            throw new ApiException("Missing the required parameter 'did' when calling updateAgencyContacts(Async)");
        }

        return updateAgencyContactsCall(xIBMClientId, authorization, did, xIBMClientSecret, requestBody, _callback);

    }

    /**
     * Update agency details
     * 
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param requestBody  (optional)
     * @return Contact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public Contact updateAgencyContacts(String xIBMClientId, String authorization, String did, String xIBMClientSecret, Contact requestBody) throws ApiException {
        ApiResponse<Contact> localVarResp = updateAgencyContactsWithHttpInfo(xIBMClientId, authorization, did, xIBMClientSecret, requestBody);
        return localVarResp.getData();
    }

    /**
     * Update agency details
     * 
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Contact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contact> updateAgencyContactsWithHttpInfo(String xIBMClientId, String authorization, String did, String xIBMClientSecret, Contact requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateAgencyContactsValidateBeforeCall(xIBMClientId, authorization, did, xIBMClientSecret, requestBody, null);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update agency details (asynchronously)
     * 
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency UID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAgencyContactsAsync(String xIBMClientId, String authorization, String did, String xIBMClientSecret, Contact requestBody, final ApiCallback<Contact> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAgencyContactsValidateBeforeCall(xIBMClientId, authorization, did, xIBMClientSecret, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAgencySyncByDid
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency ID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAgencySyncByDidCall(String xIBMClientId, String authorization, String did, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/agencies/{did}/events/sync"
            .replace("{" + "did" + "}", localVarApiClient.escapeString(did.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIBMClientId != null) {
            localVarHeaderParams.put("X-IBM-Client-Id", localVarApiClient.parameterToString(xIBMClientId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xIBMClientSecret != null) {
            localVarHeaderParams.put("X-IBM-Client-Secret", localVarApiClient.parameterToString(xIBMClientSecret));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientIdHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAgencySyncByDidValidateBeforeCall(String xIBMClientId, String authorization, String did, String xIBMClientSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIBMClientId' is set
        if (xIBMClientId == null) {
            throw new ApiException("Missing the required parameter 'xIBMClientId' when calling updateAgencySyncByDid(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateAgencySyncByDid(Async)");
        }

        // verify the required parameter 'did' is set
        if (did == null) {
            throw new ApiException("Missing the required parameter 'did' when calling updateAgencySyncByDid(Async)");
        }

        return updateAgencySyncByDidCall(xIBMClientId, authorization, did, xIBMClientSecret, _callback);

    }

    /**
     * Update agency details by sync
     * Update agency details by sync
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency ID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @return AgencyWithDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public AgencyWithDetails updateAgencySyncByDid(String xIBMClientId, String authorization, String did, String xIBMClientSecret) throws ApiException {
        ApiResponse<AgencyWithDetails> localVarResp = updateAgencySyncByDidWithHttpInfo(xIBMClientId, authorization, did, xIBMClientSecret);
        return localVarResp.getData();
    }

    /**
     * Update agency details by sync
     * Update agency details by sync
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency ID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @return ApiResponse&lt;AgencyWithDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AgencyWithDetails> updateAgencySyncByDidWithHttpInfo(String xIBMClientId, String authorization, String did, String xIBMClientSecret) throws ApiException {
        okhttp3.Call localVarCall = updateAgencySyncByDidValidateBeforeCall(xIBMClientId, authorization, did, xIBMClientSecret, null);
        Type localVarReturnType = new TypeToken<AgencyWithDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update agency details by sync (asynchronously)
     * Update agency details by sync
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param did Agency ID (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAgencySyncByDidAsync(String xIBMClientId, String authorization, String did, String xIBMClientSecret, final ApiCallback<AgencyWithDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAgencySyncByDidValidateBeforeCall(xIBMClientId, authorization, did, xIBMClientSecret, _callback);
        Type localVarReturnType = new TypeToken<AgencyWithDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSimStatus
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSimStatusCall(String xIBMClientId, String authorization, String xIBMClientSecret, SimCard requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/agencies/sim-status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIBMClientId != null) {
            localVarHeaderParams.put("X-IBM-Client-Id", localVarApiClient.parameterToString(xIBMClientId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xIBMClientSecret != null) {
            localVarHeaderParams.put("X-IBM-Client-Secret", localVarApiClient.parameterToString(xIBMClientSecret));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientIdHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSimStatusValidateBeforeCall(String xIBMClientId, String authorization, String xIBMClientSecret, SimCard requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIBMClientId' is set
        if (xIBMClientId == null) {
            throw new ApiException("Missing the required parameter 'xIBMClientId' when calling updateSimStatus(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateSimStatus(Async)");
        }

        return updateSimStatusCall(xIBMClientId, authorization, xIBMClientSecret, requestBody, _callback);

    }

    /**
     * Update newly created/existing organizations sim card received status
     * 
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param requestBody  (optional)
     * @return SimCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public SimCardResponse updateSimStatus(String xIBMClientId, String authorization, String xIBMClientSecret, SimCard requestBody) throws ApiException {
        ApiResponse<SimCardResponse> localVarResp = updateSimStatusWithHttpInfo(xIBMClientId, authorization, xIBMClientSecret, requestBody);
        return localVarResp.getData();
    }

    /**
     * Update newly created/existing organizations sim card received status
     * 
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;SimCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimCardResponse> updateSimStatusWithHttpInfo(String xIBMClientId, String authorization, String xIBMClientSecret, SimCard requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateSimStatusValidateBeforeCall(xIBMClientId, authorization, xIBMClientSecret, requestBody, null);
        Type localVarReturnType = new TypeToken<SimCardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update newly created/existing organizations sim card received status (asynchronously)
     * 
     * @param xIBMClientId Unique System Identifier (required)
     * @param authorization Authentication Token (required)
     * @param xIBMClientSecret Client Secret (optional)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnAuthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSimStatusAsync(String xIBMClientId, String authorization, String xIBMClientSecret, SimCard requestBody, final ApiCallback<SimCardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSimStatusValidateBeforeCall(xIBMClientId, authorization, xIBMClientSecret, requestBody, _callback);
        Type localVarReturnType = new TypeToken<SimCardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
