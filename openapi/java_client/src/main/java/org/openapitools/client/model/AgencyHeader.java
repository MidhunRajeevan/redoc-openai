/*
 * Agency
 * Manage Agency Information 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.MultiLang;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Agency
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-07T11:28:29.734525700+05:30[Asia/Calcutta]")
public class AgencyHeader {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_DID = "did";
  @SerializedName(SERIALIZED_NAME_DID)
  private String did;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SOURCE_KEY = "sourceKey";
  @SerializedName(SERIALIZED_NAME_SOURCE_KEY)
  private String sourceKey;

  public static final String SERIALIZED_NAME_VERSION_HASH = "versionHash";
  @SerializedName(SERIALIZED_NAME_VERSION_HASH)
  private String versionHash;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private MultiLang name;

  public static final String SERIALIZED_NAME_CHAIN_NAME = "chainName";
  @SerializedName(SERIALIZED_NAME_CHAIN_NAME)
  private MultiLang chainName;

  public static final String SERIALIZED_NAME_TRADE_LICENSE_NUMBER = "tradeLicenseNumber";
  @SerializedName(SERIALIZED_NAME_TRADE_LICENSE_NUMBER)
  private String tradeLicenseNumber;

  public AgencyHeader() {
  }

  public AgencyHeader id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique Identifier for the Agency
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public AgencyHeader did(String did) {
    
    this.did = did;
    return this;
  }

   /**
   * Decentralized Identifier for the Agency
   * @return did
  **/
  @javax.annotation.Nullable
  public String getDid() {
    return did;
  }


  public void setDid(String did) {
    this.did = did;
  }


  public AgencyHeader source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * Source for the Decentralized ID
   * @return source
  **/
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public AgencyHeader sourceKey(String sourceKey) {
    
    this.sourceKey = sourceKey;
    return this;
  }

   /**
   * Natural Key from the Source. e.g. Trade License Number
   * @return sourceKey
  **/
  @javax.annotation.Nullable
  public String getSourceKey() {
    return sourceKey;
  }


  public void setSourceKey(String sourceKey) {
    this.sourceKey = sourceKey;
  }


  public AgencyHeader versionHash(String versionHash) {
    
    this.versionHash = versionHash;
    return this;
  }

   /**
   * Hash of all trackable attributes
   * @return versionHash
  **/
  @javax.annotation.Nullable
  public String getVersionHash() {
    return versionHash;
  }


  public void setVersionHash(String versionHash) {
    this.versionHash = versionHash;
  }


  public AgencyHeader name(MultiLang name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public MultiLang getName() {
    return name;
  }


  public void setName(MultiLang name) {
    this.name = name;
  }


  public AgencyHeader chainName(MultiLang chainName) {
    
    this.chainName = chainName;
    return this;
  }

   /**
   * Get chainName
   * @return chainName
  **/
  @javax.annotation.Nullable
  public MultiLang getChainName() {
    return chainName;
  }


  public void setChainName(MultiLang chainName) {
    this.chainName = chainName;
  }


  public AgencyHeader tradeLicenseNumber(String tradeLicenseNumber) {
    
    this.tradeLicenseNumber = tradeLicenseNumber;
    return this;
  }

   /**
   * tradeLicenseNumber 
   * @return tradeLicenseNumber
  **/
  @javax.annotation.Nullable
  public String getTradeLicenseNumber() {
    return tradeLicenseNumber;
  }


  public void setTradeLicenseNumber(String tradeLicenseNumber) {
    this.tradeLicenseNumber = tradeLicenseNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgencyHeader agencyHeader = (AgencyHeader) o;
    return Objects.equals(this.id, agencyHeader.id) &&
        Objects.equals(this.did, agencyHeader.did) &&
        Objects.equals(this.source, agencyHeader.source) &&
        Objects.equals(this.sourceKey, agencyHeader.sourceKey) &&
        Objects.equals(this.versionHash, agencyHeader.versionHash) &&
        Objects.equals(this.name, agencyHeader.name) &&
        Objects.equals(this.chainName, agencyHeader.chainName) &&
        Objects.equals(this.tradeLicenseNumber, agencyHeader.tradeLicenseNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, did, source, sourceKey, versionHash, name, chainName, tradeLicenseNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgencyHeader {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    did: ").append(toIndentedString(did)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceKey: ").append(toIndentedString(sourceKey)).append("\n");
    sb.append("    versionHash: ").append(toIndentedString(versionHash)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    chainName: ").append(toIndentedString(chainName)).append("\n");
    sb.append("    tradeLicenseNumber: ").append(toIndentedString(tradeLicenseNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("did");
    openapiFields.add("source");
    openapiFields.add("sourceKey");
    openapiFields.add("versionHash");
    openapiFields.add("name");
    openapiFields.add("chainName");
    openapiFields.add("tradeLicenseNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AgencyHeader
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AgencyHeader.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgencyHeader is not found in the empty JSON string", AgencyHeader.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AgencyHeader.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgencyHeader` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("did") != null && !jsonObj.get("did").isJsonNull()) && !jsonObj.get("did").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `did` to be a primitive type in the JSON string but got `%s`", jsonObj.get("did").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("sourceKey") != null && !jsonObj.get("sourceKey").isJsonNull()) && !jsonObj.get("sourceKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceKey").toString()));
      }
      if ((jsonObj.get("versionHash") != null && !jsonObj.get("versionHash").isJsonNull()) && !jsonObj.get("versionHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionHash").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        MultiLang.validateJsonObject(jsonObj.getAsJsonObject("name"));
      }
      // validate the optional field `chainName`
      if (jsonObj.get("chainName") != null && !jsonObj.get("chainName").isJsonNull()) {
        MultiLang.validateJsonObject(jsonObj.getAsJsonObject("chainName"));
      }
      if ((jsonObj.get("tradeLicenseNumber") != null && !jsonObj.get("tradeLicenseNumber").isJsonNull()) && !jsonObj.get("tradeLicenseNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tradeLicenseNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tradeLicenseNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgencyHeader.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgencyHeader' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgencyHeader> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgencyHeader.class));

       return (TypeAdapter<T>) new TypeAdapter<AgencyHeader>() {
           @Override
           public void write(JsonWriter out, AgencyHeader value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgencyHeader read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AgencyHeader given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AgencyHeader
  * @throws IOException if the JSON string is invalid with respect to AgencyHeader
  */
  public static AgencyHeader fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgencyHeader.class);
  }

 /**
  * Convert an instance of AgencyHeader to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

