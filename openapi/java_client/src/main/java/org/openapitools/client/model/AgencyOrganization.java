/*
 * Agency
 * Manage Agency Information 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.LanguageMapper;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Permit issued by RTA
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-07T11:28:29.734525700+05:30[Asia/Calcutta]")
public class AgencyOrganization {
  public static final String SERIALIZED_NAME_LICENSE_TYPE = "licenseType";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE)
  private LanguageMapper licenseType;

  public static final String SERIALIZED_NAME_LEGAL_TYPE = "legalType";
  @SerializedName(SERIALIZED_NAME_LEGAL_TYPE)
  private LanguageMapper legalType;

  public static final String SERIALIZED_NAME_CLASS_DESCRIPTION = "classDescription";
  @SerializedName(SERIALIZED_NAME_CLASS_DESCRIPTION)
  private LanguageMapper classDescription;

  public static final String SERIALIZED_NAME_REPRESENTED_BY = "representedBy";
  @SerializedName(SERIALIZED_NAME_REPRESENTED_BY)
  private LanguageMapper representedBy;

  public static final String SERIALIZED_NAME_ISSUED_DATE = "issuedDate";
  @SerializedName(SERIALIZED_NAME_ISSUED_DATE)
  private OffsetDateTime issuedDate;

  public static final String SERIALIZED_NAME_EXPRIY_DATE = "expriyDate";
  @SerializedName(SERIALIZED_NAME_EXPRIY_DATE)
  private OffsetDateTime expriyDate;

  public AgencyOrganization() {
  }

  public AgencyOrganization licenseType(LanguageMapper licenseType) {
    
    this.licenseType = licenseType;
    return this;
  }

   /**
   * Get licenseType
   * @return licenseType
  **/
  @javax.annotation.Nullable
  public LanguageMapper getLicenseType() {
    return licenseType;
  }


  public void setLicenseType(LanguageMapper licenseType) {
    this.licenseType = licenseType;
  }


  public AgencyOrganization legalType(LanguageMapper legalType) {
    
    this.legalType = legalType;
    return this;
  }

   /**
   * Get legalType
   * @return legalType
  **/
  @javax.annotation.Nullable
  public LanguageMapper getLegalType() {
    return legalType;
  }


  public void setLegalType(LanguageMapper legalType) {
    this.legalType = legalType;
  }


  public AgencyOrganization classDescription(LanguageMapper classDescription) {
    
    this.classDescription = classDescription;
    return this;
  }

   /**
   * Get classDescription
   * @return classDescription
  **/
  @javax.annotation.Nullable
  public LanguageMapper getClassDescription() {
    return classDescription;
  }


  public void setClassDescription(LanguageMapper classDescription) {
    this.classDescription = classDescription;
  }


  public AgencyOrganization representedBy(LanguageMapper representedBy) {
    
    this.representedBy = representedBy;
    return this;
  }

   /**
   * Get representedBy
   * @return representedBy
  **/
  @javax.annotation.Nullable
  public LanguageMapper getRepresentedBy() {
    return representedBy;
  }


  public void setRepresentedBy(LanguageMapper representedBy) {
    this.representedBy = representedBy;
  }


  public AgencyOrganization issuedDate(OffsetDateTime issuedDate) {
    
    this.issuedDate = issuedDate;
    return this;
  }

   /**
   * Permit Number of the Agency issued by RTA
   * @return issuedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getIssuedDate() {
    return issuedDate;
  }


  public void setIssuedDate(OffsetDateTime issuedDate) {
    this.issuedDate = issuedDate;
  }


  public AgencyOrganization expriyDate(OffsetDateTime expriyDate) {
    
    this.expriyDate = expriyDate;
    return this;
  }

   /**
   * Permit Number of the Agency issued by RTA
   * @return expriyDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpriyDate() {
    return expriyDate;
  }


  public void setExpriyDate(OffsetDateTime expriyDate) {
    this.expriyDate = expriyDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgencyOrganization agencyOrganization = (AgencyOrganization) o;
    return Objects.equals(this.licenseType, agencyOrganization.licenseType) &&
        Objects.equals(this.legalType, agencyOrganization.legalType) &&
        Objects.equals(this.classDescription, agencyOrganization.classDescription) &&
        Objects.equals(this.representedBy, agencyOrganization.representedBy) &&
        Objects.equals(this.issuedDate, agencyOrganization.issuedDate) &&
        Objects.equals(this.expriyDate, agencyOrganization.expriyDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(licenseType, legalType, classDescription, representedBy, issuedDate, expriyDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgencyOrganization {\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    legalType: ").append(toIndentedString(legalType)).append("\n");
    sb.append("    classDescription: ").append(toIndentedString(classDescription)).append("\n");
    sb.append("    representedBy: ").append(toIndentedString(representedBy)).append("\n");
    sb.append("    issuedDate: ").append(toIndentedString(issuedDate)).append("\n");
    sb.append("    expriyDate: ").append(toIndentedString(expriyDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("licenseType");
    openapiFields.add("legalType");
    openapiFields.add("classDescription");
    openapiFields.add("representedBy");
    openapiFields.add("issuedDate");
    openapiFields.add("expriyDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AgencyOrganization
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AgencyOrganization.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgencyOrganization is not found in the empty JSON string", AgencyOrganization.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AgencyOrganization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgencyOrganization` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `licenseType`
      if (jsonObj.get("licenseType") != null && !jsonObj.get("licenseType").isJsonNull()) {
        LanguageMapper.validateJsonObject(jsonObj.getAsJsonObject("licenseType"));
      }
      // validate the optional field `legalType`
      if (jsonObj.get("legalType") != null && !jsonObj.get("legalType").isJsonNull()) {
        LanguageMapper.validateJsonObject(jsonObj.getAsJsonObject("legalType"));
      }
      // validate the optional field `classDescription`
      if (jsonObj.get("classDescription") != null && !jsonObj.get("classDescription").isJsonNull()) {
        LanguageMapper.validateJsonObject(jsonObj.getAsJsonObject("classDescription"));
      }
      // validate the optional field `representedBy`
      if (jsonObj.get("representedBy") != null && !jsonObj.get("representedBy").isJsonNull()) {
        LanguageMapper.validateJsonObject(jsonObj.getAsJsonObject("representedBy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgencyOrganization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgencyOrganization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgencyOrganization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgencyOrganization.class));

       return (TypeAdapter<T>) new TypeAdapter<AgencyOrganization>() {
           @Override
           public void write(JsonWriter out, AgencyOrganization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgencyOrganization read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AgencyOrganization given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AgencyOrganization
  * @throws IOException if the JSON string is invalid with respect to AgencyOrganization
  */
  public static AgencyOrganization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgencyOrganization.class);
  }

 /**
  * Convert an instance of AgencyOrganization to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

