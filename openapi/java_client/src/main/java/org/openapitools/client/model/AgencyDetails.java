/*
 * Agency
 * Manage Agency Information 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AgencyActivity;
import org.openapitools.client.model.AgencyCommerceRegistry;
import org.openapitools.client.model.AgencyOrganization;
import org.openapitools.client.model.AgencyPartner;
import org.openapitools.client.model.AgencyPermit;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.Contact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Agency Details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-07T11:28:29.734525700+05:30[Asia/Calcutta]")
public class AgencyDetails {
  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private AgencyOrganization organization;

  public static final String SERIALIZED_NAME_PERMIT = "permit";
  @SerializedName(SERIALIZED_NAME_PERMIT)
  private AgencyPermit permit;

  public static final String SERIALIZED_NAME_PARTNERS = "partners";
  @SerializedName(SERIALIZED_NAME_PARTNERS)
  private List<AgencyPartner> partners;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<Attachment> attachments;

  public static final String SERIALIZED_NAME_ACTIVITY = "activity";
  @SerializedName(SERIALIZED_NAME_ACTIVITY)
  private List<AgencyActivity> activity;

  public static final String SERIALIZED_NAME_COMMERCE_REGISTRY = "commerceRegistry";
  @SerializedName(SERIALIZED_NAME_COMMERCE_REGISTRY)
  private AgencyCommerceRegistry commerceRegistry;

  public AgencyDetails() {
  }

  public AgencyDetails organization(AgencyOrganization organization) {
    
    this.organization = organization;
    return this;
  }

   /**
   * Get organization
   * @return organization
  **/
  @javax.annotation.Nullable
  public AgencyOrganization getOrganization() {
    return organization;
  }


  public void setOrganization(AgencyOrganization organization) {
    this.organization = organization;
  }


  public AgencyDetails permit(AgencyPermit permit) {
    
    this.permit = permit;
    return this;
  }

   /**
   * Get permit
   * @return permit
  **/
  @javax.annotation.Nullable
  public AgencyPermit getPermit() {
    return permit;
  }


  public void setPermit(AgencyPermit permit) {
    this.permit = permit;
  }


  public AgencyDetails partners(List<AgencyPartner> partners) {
    
    this.partners = partners;
    return this;
  }

  public AgencyDetails addPartnersItem(AgencyPartner partnersItem) {
    if (this.partners == null) {
      this.partners = new ArrayList<>();
    }
    this.partners.add(partnersItem);
    return this;
  }

   /**
   * List of Partners in the Agency
   * @return partners
  **/
  @javax.annotation.Nullable
  public List<AgencyPartner> getPartners() {
    return partners;
  }


  public void setPartners(List<AgencyPartner> partners) {
    this.partners = partners;
  }


  public AgencyDetails contact(Contact contact) {
    
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @javax.annotation.Nullable
  public Contact getContact() {
    return contact;
  }


  public void setContact(Contact contact) {
    this.contact = contact;
  }


  public AgencyDetails attachments(List<Attachment> attachments) {
    
    this.attachments = attachments;
    return this;
  }

  public AgencyDetails addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Attachments
   * @return attachments
  **/
  @javax.annotation.Nullable
  public List<Attachment> getAttachments() {
    return attachments;
  }


  public void setAttachments(List<Attachment> attachments) {
    this.attachments = attachments;
  }


  public AgencyDetails activity(List<AgencyActivity> activity) {
    
    this.activity = activity;
    return this;
  }

  public AgencyDetails addActivityItem(AgencyActivity activityItem) {
    if (this.activity == null) {
      this.activity = new ArrayList<>();
    }
    this.activity.add(activityItem);
    return this;
  }

   /**
   * Activity
   * @return activity
  **/
  @javax.annotation.Nullable
  public List<AgencyActivity> getActivity() {
    return activity;
  }


  public void setActivity(List<AgencyActivity> activity) {
    this.activity = activity;
  }


  public AgencyDetails commerceRegistry(AgencyCommerceRegistry commerceRegistry) {
    
    this.commerceRegistry = commerceRegistry;
    return this;
  }

   /**
   * Get commerceRegistry
   * @return commerceRegistry
  **/
  @javax.annotation.Nullable
  public AgencyCommerceRegistry getCommerceRegistry() {
    return commerceRegistry;
  }


  public void setCommerceRegistry(AgencyCommerceRegistry commerceRegistry) {
    this.commerceRegistry = commerceRegistry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgencyDetails agencyDetails = (AgencyDetails) o;
    return Objects.equals(this.organization, agencyDetails.organization) &&
        Objects.equals(this.permit, agencyDetails.permit) &&
        Objects.equals(this.partners, agencyDetails.partners) &&
        Objects.equals(this.contact, agencyDetails.contact) &&
        Objects.equals(this.attachments, agencyDetails.attachments) &&
        Objects.equals(this.activity, agencyDetails.activity) &&
        Objects.equals(this.commerceRegistry, agencyDetails.commerceRegistry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(organization, permit, partners, contact, attachments, activity, commerceRegistry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgencyDetails {\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    permit: ").append(toIndentedString(permit)).append("\n");
    sb.append("    partners: ").append(toIndentedString(partners)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    commerceRegistry: ").append(toIndentedString(commerceRegistry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("organization");
    openapiFields.add("permit");
    openapiFields.add("partners");
    openapiFields.add("contact");
    openapiFields.add("attachments");
    openapiFields.add("activity");
    openapiFields.add("commerceRegistry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AgencyDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AgencyDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgencyDetails is not found in the empty JSON string", AgencyDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AgencyDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgencyDetails` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        AgencyOrganization.validateJsonObject(jsonObj.getAsJsonObject("organization"));
      }
      // validate the optional field `permit`
      if (jsonObj.get("permit") != null && !jsonObj.get("permit").isJsonNull()) {
        AgencyPermit.validateJsonObject(jsonObj.getAsJsonObject("permit"));
      }
      if (jsonObj.get("partners") != null && !jsonObj.get("partners").isJsonNull()) {
        JsonArray jsonArraypartners = jsonObj.getAsJsonArray("partners");
        if (jsonArraypartners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("partners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `partners` to be an array in the JSON string but got `%s`", jsonObj.get("partners").toString()));
          }

          // validate the optional field `partners` (array)
          for (int i = 0; i < jsonArraypartners.size(); i++) {
            AgencyPartner.validateJsonObject(jsonArraypartners.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `contact`
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        Contact.validateJsonObject(jsonObj.getAsJsonObject("contact"));
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonObject(jsonArrayattachments.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("activity") != null && !jsonObj.get("activity").isJsonNull()) {
        JsonArray jsonArrayactivity = jsonObj.getAsJsonArray("activity");
        if (jsonArrayactivity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activity").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activity` to be an array in the JSON string but got `%s`", jsonObj.get("activity").toString()));
          }

          // validate the optional field `activity` (array)
          for (int i = 0; i < jsonArrayactivity.size(); i++) {
            AgencyActivity.validateJsonObject(jsonArrayactivity.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `commerceRegistry`
      if (jsonObj.get("commerceRegistry") != null && !jsonObj.get("commerceRegistry").isJsonNull()) {
        AgencyCommerceRegistry.validateJsonObject(jsonObj.getAsJsonObject("commerceRegistry"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgencyDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgencyDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgencyDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgencyDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AgencyDetails>() {
           @Override
           public void write(JsonWriter out, AgencyDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgencyDetails read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AgencyDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AgencyDetails
  * @throws IOException if the JSON string is invalid with respect to AgencyDetails
  */
  public static AgencyDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgencyDetails.class);
  }

 /**
  * Convert an instance of AgencyDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

