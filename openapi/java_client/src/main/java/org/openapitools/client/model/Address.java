/*
 * Agency
 * Manage Agency Information 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.CodeName;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.MultiLang;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Addresses
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-07T11:28:29.734525700+05:30[Asia/Calcutta]")
public class Address {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private MultiLang address;

  public static final String SERIALIZED_NAME_MAKANI = "makani";
  @SerializedName(SERIALIZED_NAME_MAKANI)
  private String makani;

  public static final String SERIALIZED_NAME_PO_BOX = "poBox";
  @SerializedName(SERIALIZED_NAME_PO_BOX)
  private String poBox;

  public static final String SERIALIZED_NAME_AREA = "area";
  @SerializedName(SERIALIZED_NAME_AREA)
  private CodeName area;

  public static final String SERIALIZED_NAME_SUB_AREA = "subArea";
  @SerializedName(SERIALIZED_NAME_SUB_AREA)
  private CodeName subArea;

  public static final String SERIALIZED_NAME_COMMUNITY = "community";
  @SerializedName(SERIALIZED_NAME_COMMUNITY)
  private CodeName community;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private CodeName unit;

  public static final String SERIALIZED_NAME_BUILDING = "building";
  @SerializedName(SERIALIZED_NAME_BUILDING)
  private CodeName building;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private CodeName street;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private CodeName city;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private CodeName region;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private CodeName country;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_EMIRATE = "emirate";
  @SerializedName(SERIALIZED_NAME_EMIRATE)
  private CodeName emirate;

  public static final String SERIALIZED_NAME_GEO_LOCATION = "geoLocation";
  @SerializedName(SERIALIZED_NAME_GEO_LOCATION)
  private Location geoLocation;

  public static final String SERIALIZED_NAME_PREFERRED = "preferred";
  @SerializedName(SERIALIZED_NAME_PREFERRED)
  private Boolean preferred;

  public Address() {
  }

  public Address label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Address Label
   * @return label
  **/
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public Address address(MultiLang address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  public MultiLang getAddress() {
    return address;
  }


  public void setAddress(MultiLang address) {
    this.address = address;
  }


  public Address makani(String makani) {
    
    this.makani = makani;
    return this;
  }

   /**
   * Makani Number
   * @return makani
  **/
  @javax.annotation.Nullable
  public String getMakani() {
    return makani;
  }


  public void setMakani(String makani) {
    this.makani = makani;
  }


  public Address poBox(String poBox) {
    
    this.poBox = poBox;
    return this;
  }

   /**
   * PO Box Number
   * @return poBox
  **/
  @javax.annotation.Nullable
  public String getPoBox() {
    return poBox;
  }


  public void setPoBox(String poBox) {
    this.poBox = poBox;
  }


  public Address area(CodeName area) {
    
    this.area = area;
    return this;
  }

   /**
   * Get area
   * @return area
  **/
  @javax.annotation.Nullable
  public CodeName getArea() {
    return area;
  }


  public void setArea(CodeName area) {
    this.area = area;
  }


  public Address subArea(CodeName subArea) {
    
    this.subArea = subArea;
    return this;
  }

   /**
   * Get subArea
   * @return subArea
  **/
  @javax.annotation.Nullable
  public CodeName getSubArea() {
    return subArea;
  }


  public void setSubArea(CodeName subArea) {
    this.subArea = subArea;
  }


  public Address community(CodeName community) {
    
    this.community = community;
    return this;
  }

   /**
   * Get community
   * @return community
  **/
  @javax.annotation.Nullable
  public CodeName getCommunity() {
    return community;
  }


  public void setCommunity(CodeName community) {
    this.community = community;
  }


  public Address unit(CodeName unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @javax.annotation.Nullable
  public CodeName getUnit() {
    return unit;
  }


  public void setUnit(CodeName unit) {
    this.unit = unit;
  }


  public Address building(CodeName building) {
    
    this.building = building;
    return this;
  }

   /**
   * Get building
   * @return building
  **/
  @javax.annotation.Nullable
  public CodeName getBuilding() {
    return building;
  }


  public void setBuilding(CodeName building) {
    this.building = building;
  }


  public Address street(CodeName street) {
    
    this.street = street;
    return this;
  }

   /**
   * Get street
   * @return street
  **/
  @javax.annotation.Nullable
  public CodeName getStreet() {
    return street;
  }


  public void setStreet(CodeName street) {
    this.street = street;
  }


  public Address city(CodeName city) {
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  public CodeName getCity() {
    return city;
  }


  public void setCity(CodeName city) {
    this.city = city;
  }


  public Address region(CodeName region) {
    
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @javax.annotation.Nullable
  public CodeName getRegion() {
    return region;
  }


  public void setRegion(CodeName region) {
    this.region = region;
  }


  public Address country(CodeName country) {
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  public CodeName getCountry() {
    return country;
  }


  public void setCountry(CodeName country) {
    this.country = country;
  }


  public Address postalCode(String postalCode) {
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Postal Code
   * @return postalCode
  **/
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public Address emirate(CodeName emirate) {
    
    this.emirate = emirate;
    return this;
  }

   /**
   * Get emirate
   * @return emirate
  **/
  @javax.annotation.Nullable
  public CodeName getEmirate() {
    return emirate;
  }


  public void setEmirate(CodeName emirate) {
    this.emirate = emirate;
  }


  public Address geoLocation(Location geoLocation) {
    
    this.geoLocation = geoLocation;
    return this;
  }

   /**
   * Get geoLocation
   * @return geoLocation
  **/
  @javax.annotation.Nullable
  public Location getGeoLocation() {
    return geoLocation;
  }


  public void setGeoLocation(Location geoLocation) {
    this.geoLocation = geoLocation;
  }


  public Address preferred(Boolean preferred) {
    
    this.preferred = preferred;
    return this;
  }

   /**
   * Preferred Address Flag
   * @return preferred
  **/
  @javax.annotation.Nullable
  public Boolean getPreferred() {
    return preferred;
  }


  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Address address = (Address) o;
    return Objects.equals(this.label, address.label) &&
        Objects.equals(this.address, address.address) &&
        Objects.equals(this.makani, address.makani) &&
        Objects.equals(this.poBox, address.poBox) &&
        Objects.equals(this.area, address.area) &&
        Objects.equals(this.subArea, address.subArea) &&
        Objects.equals(this.community, address.community) &&
        Objects.equals(this.unit, address.unit) &&
        Objects.equals(this.building, address.building) &&
        Objects.equals(this.street, address.street) &&
        Objects.equals(this.city, address.city) &&
        Objects.equals(this.region, address.region) &&
        Objects.equals(this.country, address.country) &&
        Objects.equals(this.postalCode, address.postalCode) &&
        Objects.equals(this.emirate, address.emirate) &&
        Objects.equals(this.geoLocation, address.geoLocation) &&
        Objects.equals(this.preferred, address.preferred);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, address, makani, poBox, area, subArea, community, unit, building, street, city, region, country, postalCode, emirate, geoLocation, preferred);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Address {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    makani: ").append(toIndentedString(makani)).append("\n");
    sb.append("    poBox: ").append(toIndentedString(poBox)).append("\n");
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    subArea: ").append(toIndentedString(subArea)).append("\n");
    sb.append("    community: ").append(toIndentedString(community)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    building: ").append(toIndentedString(building)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    emirate: ").append(toIndentedString(emirate)).append("\n");
    sb.append("    geoLocation: ").append(toIndentedString(geoLocation)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("address");
    openapiFields.add("makani");
    openapiFields.add("poBox");
    openapiFields.add("area");
    openapiFields.add("subArea");
    openapiFields.add("community");
    openapiFields.add("unit");
    openapiFields.add("building");
    openapiFields.add("street");
    openapiFields.add("city");
    openapiFields.add("region");
    openapiFields.add("country");
    openapiFields.add("postalCode");
    openapiFields.add("emirate");
    openapiFields.add("geoLocation");
    openapiFields.add("preferred");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Address
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Address.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Address is not found in the empty JSON string", Address.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Address.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Address` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        MultiLang.validateJsonObject(jsonObj.getAsJsonObject("address"));
      }
      if ((jsonObj.get("makani") != null && !jsonObj.get("makani").isJsonNull()) && !jsonObj.get("makani").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `makani` to be a primitive type in the JSON string but got `%s`", jsonObj.get("makani").toString()));
      }
      if ((jsonObj.get("poBox") != null && !jsonObj.get("poBox").isJsonNull()) && !jsonObj.get("poBox").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poBox` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poBox").toString()));
      }
      // validate the optional field `area`
      if (jsonObj.get("area") != null && !jsonObj.get("area").isJsonNull()) {
        CodeName.validateJsonObject(jsonObj.getAsJsonObject("area"));
      }
      // validate the optional field `subArea`
      if (jsonObj.get("subArea") != null && !jsonObj.get("subArea").isJsonNull()) {
        CodeName.validateJsonObject(jsonObj.getAsJsonObject("subArea"));
      }
      // validate the optional field `community`
      if (jsonObj.get("community") != null && !jsonObj.get("community").isJsonNull()) {
        CodeName.validateJsonObject(jsonObj.getAsJsonObject("community"));
      }
      // validate the optional field `unit`
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) {
        CodeName.validateJsonObject(jsonObj.getAsJsonObject("unit"));
      }
      // validate the optional field `building`
      if (jsonObj.get("building") != null && !jsonObj.get("building").isJsonNull()) {
        CodeName.validateJsonObject(jsonObj.getAsJsonObject("building"));
      }
      // validate the optional field `street`
      if (jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull()) {
        CodeName.validateJsonObject(jsonObj.getAsJsonObject("street"));
      }
      // validate the optional field `city`
      if (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) {
        CodeName.validateJsonObject(jsonObj.getAsJsonObject("city"));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        CodeName.validateJsonObject(jsonObj.getAsJsonObject("region"));
      }
      // validate the optional field `country`
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        CodeName.validateJsonObject(jsonObj.getAsJsonObject("country"));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      // validate the optional field `emirate`
      if (jsonObj.get("emirate") != null && !jsonObj.get("emirate").isJsonNull()) {
        CodeName.validateJsonObject(jsonObj.getAsJsonObject("emirate"));
      }
      // validate the optional field `geoLocation`
      if (jsonObj.get("geoLocation") != null && !jsonObj.get("geoLocation").isJsonNull()) {
        Location.validateJsonObject(jsonObj.getAsJsonObject("geoLocation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Address.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Address' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Address> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Address.class));

       return (TypeAdapter<T>) new TypeAdapter<Address>() {
           @Override
           public void write(JsonWriter out, Address value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Address read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Address given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Address
  * @throws IOException if the JSON string is invalid with respect to Address
  */
  public static Address fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Address.class);
  }

 /**
  * Convert an instance of Address to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

