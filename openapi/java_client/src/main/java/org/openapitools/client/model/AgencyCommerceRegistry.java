/*
 * Agency
 * Manage Agency Information 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.MultiLang;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CommerceRegistry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-07T11:28:29.734525700+05:30[Asia/Calcutta]")
public class AgencyCommerceRegistry {
  public static final String SERIALIZED_NAME_REGISTER_SERIAL_NUMBER = "registerSerialNumber";
  @SerializedName(SERIALIZED_NAME_REGISTER_SERIAL_NUMBER)
  private String registerSerialNumber;

  public static final String SERIALIZED_NAME_UCR_NUMBER = "ucrNumber";
  @SerializedName(SERIALIZED_NAME_UCR_NUMBER)
  private String ucrNumber;

  public static final String SERIALIZED_NAME_COMMERCE_NUMBER = "commerceNumber";
  @SerializedName(SERIALIZED_NAME_COMMERCE_NUMBER)
  private String commerceNumber;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private MultiLang companyName;

  public static final String SERIALIZED_NAME_MAIN_LICENSE_NUMBER = "mainLicenseNumber";
  @SerializedName(SERIALIZED_NAME_MAIN_LICENSE_NUMBER)
  private String mainLicenseNumber;

  public static final String SERIALIZED_NAME_COMMERCE_REGISTER_TYPE = "commerceRegisterType";
  @SerializedName(SERIALIZED_NAME_COMMERCE_REGISTER_TYPE)
  private String commerceRegisterType;

  public static final String SERIALIZED_NAME_LEGAL_TYPE = "legalType";
  @SerializedName(SERIALIZED_NAME_LEGAL_TYPE)
  private String legalType;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public static final String SERIALIZED_NAME_ISSUE_DATE = "issueDate";
  @SerializedName(SERIALIZED_NAME_ISSUE_DATE)
  private String issueDate;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private String expiryDate;

  public static final String SERIALIZED_NAME_CANCEL_DATE = "cancelDate";
  @SerializedName(SERIALIZED_NAME_CANCEL_DATE)
  private String cancelDate;

  public static final String SERIALIZED_NAME_PAID_UP_CAPITAL = "paidUpCapital";
  @SerializedName(SERIALIZED_NAME_PAID_UP_CAPITAL)
  private String paidUpCapital;

  public static final String SERIALIZED_NAME_NOMINAL_CAPITAL = "nominalCapital";
  @SerializedName(SERIALIZED_NAME_NOMINAL_CAPITAL)
  private String nominalCapital;

  public AgencyCommerceRegistry() {
  }

  public AgencyCommerceRegistry registerSerialNumber(String registerSerialNumber) {
    
    this.registerSerialNumber = registerSerialNumber;
    return this;
  }

   /**
   * Agency Commerce Registry Serial Number
   * @return registerSerialNumber
  **/
  @javax.annotation.Nullable
  public String getRegisterSerialNumber() {
    return registerSerialNumber;
  }


  public void setRegisterSerialNumber(String registerSerialNumber) {
    this.registerSerialNumber = registerSerialNumber;
  }


  public AgencyCommerceRegistry ucrNumber(String ucrNumber) {
    
    this.ucrNumber = ucrNumber;
    return this;
  }

   /**
   * UCR Number
   * @return ucrNumber
  **/
  @javax.annotation.Nullable
  public String getUcrNumber() {
    return ucrNumber;
  }


  public void setUcrNumber(String ucrNumber) {
    this.ucrNumber = ucrNumber;
  }


  public AgencyCommerceRegistry commerceNumber(String commerceNumber) {
    
    this.commerceNumber = commerceNumber;
    return this;
  }

   /**
   * Agency Commerce Number
   * @return commerceNumber
  **/
  @javax.annotation.Nullable
  public String getCommerceNumber() {
    return commerceNumber;
  }


  public void setCommerceNumber(String commerceNumber) {
    this.commerceNumber = commerceNumber;
  }


  public AgencyCommerceRegistry companyName(MultiLang companyName) {
    
    this.companyName = companyName;
    return this;
  }

   /**
   * Get companyName
   * @return companyName
  **/
  @javax.annotation.Nullable
  public MultiLang getCompanyName() {
    return companyName;
  }


  public void setCompanyName(MultiLang companyName) {
    this.companyName = companyName;
  }


  public AgencyCommerceRegistry mainLicenseNumber(String mainLicenseNumber) {
    
    this.mainLicenseNumber = mainLicenseNumber;
    return this;
  }

   /**
   * Agency Main License Number
   * @return mainLicenseNumber
  **/
  @javax.annotation.Nullable
  public String getMainLicenseNumber() {
    return mainLicenseNumber;
  }


  public void setMainLicenseNumber(String mainLicenseNumber) {
    this.mainLicenseNumber = mainLicenseNumber;
  }


  public AgencyCommerceRegistry commerceRegisterType(String commerceRegisterType) {
    
    this.commerceRegisterType = commerceRegisterType;
    return this;
  }

   /**
   * Agency Commerce Registry Type
   * @return commerceRegisterType
  **/
  @javax.annotation.Nullable
  public String getCommerceRegisterType() {
    return commerceRegisterType;
  }


  public void setCommerceRegisterType(String commerceRegisterType) {
    this.commerceRegisterType = commerceRegisterType;
  }


  public AgencyCommerceRegistry legalType(String legalType) {
    
    this.legalType = legalType;
    return this;
  }

   /**
   * Legal Type
   * @return legalType
  **/
  @javax.annotation.Nullable
  public String getLegalType() {
    return legalType;
  }


  public void setLegalType(String legalType) {
    this.legalType = legalType;
  }


  public AgencyCommerceRegistry nationality(String nationality) {
    
    this.nationality = nationality;
    return this;
  }

   /**
   * Nationality
   * @return nationality
  **/
  @javax.annotation.Nullable
  public String getNationality() {
    return nationality;
  }


  public void setNationality(String nationality) {
    this.nationality = nationality;
  }


  public AgencyCommerceRegistry issueDate(String issueDate) {
    
    this.issueDate = issueDate;
    return this;
  }

   /**
   * Issued Date
   * @return issueDate
  **/
  @javax.annotation.Nullable
  public String getIssueDate() {
    return issueDate;
  }


  public void setIssueDate(String issueDate) {
    this.issueDate = issueDate;
  }


  public AgencyCommerceRegistry expiryDate(String expiryDate) {
    
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Expiry Date
   * @return expiryDate
  **/
  @javax.annotation.Nullable
  public String getExpiryDate() {
    return expiryDate;
  }


  public void setExpiryDate(String expiryDate) {
    this.expiryDate = expiryDate;
  }


  public AgencyCommerceRegistry cancelDate(String cancelDate) {
    
    this.cancelDate = cancelDate;
    return this;
  }

   /**
   * Cancel date
   * @return cancelDate
  **/
  @javax.annotation.Nullable
  public String getCancelDate() {
    return cancelDate;
  }


  public void setCancelDate(String cancelDate) {
    this.cancelDate = cancelDate;
  }


  public AgencyCommerceRegistry paidUpCapital(String paidUpCapital) {
    
    this.paidUpCapital = paidUpCapital;
    return this;
  }

   /**
   * Paid Up Capital
   * @return paidUpCapital
  **/
  @javax.annotation.Nullable
  public String getPaidUpCapital() {
    return paidUpCapital;
  }


  public void setPaidUpCapital(String paidUpCapital) {
    this.paidUpCapital = paidUpCapital;
  }


  public AgencyCommerceRegistry nominalCapital(String nominalCapital) {
    
    this.nominalCapital = nominalCapital;
    return this;
  }

   /**
   * Nominal Capital
   * @return nominalCapital
  **/
  @javax.annotation.Nullable
  public String getNominalCapital() {
    return nominalCapital;
  }


  public void setNominalCapital(String nominalCapital) {
    this.nominalCapital = nominalCapital;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgencyCommerceRegistry agencyCommerceRegistry = (AgencyCommerceRegistry) o;
    return Objects.equals(this.registerSerialNumber, agencyCommerceRegistry.registerSerialNumber) &&
        Objects.equals(this.ucrNumber, agencyCommerceRegistry.ucrNumber) &&
        Objects.equals(this.commerceNumber, agencyCommerceRegistry.commerceNumber) &&
        Objects.equals(this.companyName, agencyCommerceRegistry.companyName) &&
        Objects.equals(this.mainLicenseNumber, agencyCommerceRegistry.mainLicenseNumber) &&
        Objects.equals(this.commerceRegisterType, agencyCommerceRegistry.commerceRegisterType) &&
        Objects.equals(this.legalType, agencyCommerceRegistry.legalType) &&
        Objects.equals(this.nationality, agencyCommerceRegistry.nationality) &&
        Objects.equals(this.issueDate, agencyCommerceRegistry.issueDate) &&
        Objects.equals(this.expiryDate, agencyCommerceRegistry.expiryDate) &&
        Objects.equals(this.cancelDate, agencyCommerceRegistry.cancelDate) &&
        Objects.equals(this.paidUpCapital, agencyCommerceRegistry.paidUpCapital) &&
        Objects.equals(this.nominalCapital, agencyCommerceRegistry.nominalCapital);
  }

  @Override
  public int hashCode() {
    return Objects.hash(registerSerialNumber, ucrNumber, commerceNumber, companyName, mainLicenseNumber, commerceRegisterType, legalType, nationality, issueDate, expiryDate, cancelDate, paidUpCapital, nominalCapital);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgencyCommerceRegistry {\n");
    sb.append("    registerSerialNumber: ").append(toIndentedString(registerSerialNumber)).append("\n");
    sb.append("    ucrNumber: ").append(toIndentedString(ucrNumber)).append("\n");
    sb.append("    commerceNumber: ").append(toIndentedString(commerceNumber)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    mainLicenseNumber: ").append(toIndentedString(mainLicenseNumber)).append("\n");
    sb.append("    commerceRegisterType: ").append(toIndentedString(commerceRegisterType)).append("\n");
    sb.append("    legalType: ").append(toIndentedString(legalType)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    issueDate: ").append(toIndentedString(issueDate)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    cancelDate: ").append(toIndentedString(cancelDate)).append("\n");
    sb.append("    paidUpCapital: ").append(toIndentedString(paidUpCapital)).append("\n");
    sb.append("    nominalCapital: ").append(toIndentedString(nominalCapital)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("registerSerialNumber");
    openapiFields.add("ucrNumber");
    openapiFields.add("commerceNumber");
    openapiFields.add("companyName");
    openapiFields.add("mainLicenseNumber");
    openapiFields.add("commerceRegisterType");
    openapiFields.add("legalType");
    openapiFields.add("nationality");
    openapiFields.add("issueDate");
    openapiFields.add("expiryDate");
    openapiFields.add("cancelDate");
    openapiFields.add("paidUpCapital");
    openapiFields.add("nominalCapital");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AgencyCommerceRegistry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AgencyCommerceRegistry.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgencyCommerceRegistry is not found in the empty JSON string", AgencyCommerceRegistry.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AgencyCommerceRegistry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgencyCommerceRegistry` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("registerSerialNumber") != null && !jsonObj.get("registerSerialNumber").isJsonNull()) && !jsonObj.get("registerSerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registerSerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registerSerialNumber").toString()));
      }
      if ((jsonObj.get("ucrNumber") != null && !jsonObj.get("ucrNumber").isJsonNull()) && !jsonObj.get("ucrNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ucrNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ucrNumber").toString()));
      }
      if ((jsonObj.get("commerceNumber") != null && !jsonObj.get("commerceNumber").isJsonNull()) && !jsonObj.get("commerceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commerceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commerceNumber").toString()));
      }
      // validate the optional field `companyName`
      if (jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) {
        MultiLang.validateJsonObject(jsonObj.getAsJsonObject("companyName"));
      }
      if ((jsonObj.get("mainLicenseNumber") != null && !jsonObj.get("mainLicenseNumber").isJsonNull()) && !jsonObj.get("mainLicenseNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mainLicenseNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mainLicenseNumber").toString()));
      }
      if ((jsonObj.get("commerceRegisterType") != null && !jsonObj.get("commerceRegisterType").isJsonNull()) && !jsonObj.get("commerceRegisterType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commerceRegisterType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commerceRegisterType").toString()));
      }
      if ((jsonObj.get("legalType") != null && !jsonObj.get("legalType").isJsonNull()) && !jsonObj.get("legalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalType").toString()));
      }
      if ((jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      if ((jsonObj.get("issueDate") != null && !jsonObj.get("issueDate").isJsonNull()) && !jsonObj.get("issueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueDate").toString()));
      }
      if ((jsonObj.get("expiryDate") != null && !jsonObj.get("expiryDate").isJsonNull()) && !jsonObj.get("expiryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryDate").toString()));
      }
      if ((jsonObj.get("cancelDate") != null && !jsonObj.get("cancelDate").isJsonNull()) && !jsonObj.get("cancelDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelDate").toString()));
      }
      if ((jsonObj.get("paidUpCapital") != null && !jsonObj.get("paidUpCapital").isJsonNull()) && !jsonObj.get("paidUpCapital").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paidUpCapital` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paidUpCapital").toString()));
      }
      if ((jsonObj.get("nominalCapital") != null && !jsonObj.get("nominalCapital").isJsonNull()) && !jsonObj.get("nominalCapital").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nominalCapital` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nominalCapital").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgencyCommerceRegistry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgencyCommerceRegistry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgencyCommerceRegistry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgencyCommerceRegistry.class));

       return (TypeAdapter<T>) new TypeAdapter<AgencyCommerceRegistry>() {
           @Override
           public void write(JsonWriter out, AgencyCommerceRegistry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgencyCommerceRegistry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AgencyCommerceRegistry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AgencyCommerceRegistry
  * @throws IOException if the JSON string is invalid with respect to AgencyCommerceRegistry
  */
  public static AgencyCommerceRegistry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgencyCommerceRegistry.class);
  }

 /**
  * Convert an instance of AgencyCommerceRegistry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

