/*
 * Agency
 * Manage Agency Information 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.AgencyHeader;
import org.openapitools.client.model.MultiLang;
import org.openapitools.client.model.TradeLicense;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Agency
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-07T11:28:29.734525700+05:30[Asia/Calcutta]")
public class Agency {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_DID = "did";
  @SerializedName(SERIALIZED_NAME_DID)
  private String did;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SOURCE_KEY = "sourceKey";
  @SerializedName(SERIALIZED_NAME_SOURCE_KEY)
  private String sourceKey;

  public static final String SERIALIZED_NAME_VERSION_HASH = "versionHash";
  @SerializedName(SERIALIZED_NAME_VERSION_HASH)
  private String versionHash;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private MultiLang name;

  public static final String SERIALIZED_NAME_CHAIN_NAME = "chainName";
  @SerializedName(SERIALIZED_NAME_CHAIN_NAME)
  private MultiLang chainName;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private AgencyHeader parent;

  public static final String SERIALIZED_NAME_TRAFFIC_FILE_NUMBER = "trafficFileNumber";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_FILE_NUMBER)
  private String trafficFileNumber;

  public static final String SERIALIZED_NAME_TRADE_LICENSE = "tradeLicense";
  @SerializedName(SERIALIZED_NAME_TRADE_LICENSE)
  private TradeLicense tradeLicense;

  /**
   * Category of the Agency
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    A("A"),
    
    B("B"),
    
    C("C"),
    
    D("D");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  /**
   * Status of the Agency
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE"),
    
    ARCHIVED("ARCHIVED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_ARCHIVED = "isArchived";
  @SerializedName(SERIALIZED_NAME_IS_ARCHIVED)
  private Boolean isArchived;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private String updatedBy;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Agency() {
  }

  
  public Agency(
     Long id, 
     String did, 
     String source, 
     String sourceKey, 
     String versionHash, 
     StatusEnum status, 
     Boolean isActive, 
     Boolean isArchived, 
     String createdBy, 
     String updatedBy, 
     OffsetDateTime createdAt, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.id = id;
    this.did = did;
    this.source = source;
    this.sourceKey = sourceKey;
    this.versionHash = versionHash;
    this.status = status;
    this.isActive = isActive;
    this.isArchived = isArchived;
    this.createdBy = createdBy;
    this.updatedBy = updatedBy;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

   /**
   * Unique Identifier for the Agency. Autogenerated, not supplied by the consumer.
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }




   /**
   * Decentralized Identifier for the Agency
   * @return did
  **/
  @javax.annotation.Nullable
  public String getDid() {
    return did;
  }




   /**
   * Source for the Decentralized ID
   * @return source
  **/
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }




   /**
   * Natural Key from the Source
   * @return sourceKey
  **/
  @javax.annotation.Nullable
  public String getSourceKey() {
    return sourceKey;
  }




   /**
   * Hash of all trackable attributes
   * @return versionHash
  **/
  @javax.annotation.Nullable
  public String getVersionHash() {
    return versionHash;
  }




  public Agency name(MultiLang name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public MultiLang getName() {
    return name;
  }


  public void setName(MultiLang name) {
    this.name = name;
  }


  public Agency chainName(MultiLang chainName) {
    
    this.chainName = chainName;
    return this;
  }

   /**
   * Get chainName
   * @return chainName
  **/
  @javax.annotation.Nullable
  public MultiLang getChainName() {
    return chainName;
  }


  public void setChainName(MultiLang chainName) {
    this.chainName = chainName;
  }


  public Agency parent(AgencyHeader parent) {
    
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @javax.annotation.Nullable
  public AgencyHeader getParent() {
    return parent;
  }


  public void setParent(AgencyHeader parent) {
    this.parent = parent;
  }


  public Agency trafficFileNumber(String trafficFileNumber) {
    
    this.trafficFileNumber = trafficFileNumber;
    return this;
  }

   /**
   * Traffic File Number of the Agency issued by RTA
   * @return trafficFileNumber
  **/
  @javax.annotation.Nullable
  public String getTrafficFileNumber() {
    return trafficFileNumber;
  }


  public void setTrafficFileNumber(String trafficFileNumber) {
    this.trafficFileNumber = trafficFileNumber;
  }


  public Agency tradeLicense(TradeLicense tradeLicense) {
    
    this.tradeLicense = tradeLicense;
    return this;
  }

   /**
   * Get tradeLicense
   * @return tradeLicense
  **/
  @javax.annotation.Nullable
  public TradeLicense getTradeLicense() {
    return tradeLicense;
  }


  public void setTradeLicense(TradeLicense tradeLicense) {
    this.tradeLicense = tradeLicense;
  }


  public Agency category(CategoryEnum category) {
    
    this.category = category;
    return this;
  }

   /**
   * Category of the Agency
   * @return category
  **/
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }


  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public Agency imageUrl(String imageUrl) {
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * Image URL
   * @return imageUrl
  **/
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


   /**
   * Status of the Agency
   * @return status
  **/
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }




   /**
   * Check if Agency is Active
   * @return isActive
  **/
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }




   /**
   * Check if Agency is Archived
   * @return isArchived
  **/
  @javax.annotation.Nullable
  public Boolean getIsArchived() {
    return isArchived;
  }




   /**
   * Audit Field - Created By
   * @return createdBy
  **/
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }




   /**
   * Audit Field - Updated By
   * @return updatedBy
  **/
  @javax.annotation.Nullable
  public String getUpdatedBy() {
    return updatedBy;
  }




   /**
   * Audit Field - Created Timestamp
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




   /**
   * Audit Field - Updated Timestamp
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Agency agency = (Agency) o;
    return Objects.equals(this.id, agency.id) &&
        Objects.equals(this.did, agency.did) &&
        Objects.equals(this.source, agency.source) &&
        Objects.equals(this.sourceKey, agency.sourceKey) &&
        Objects.equals(this.versionHash, agency.versionHash) &&
        Objects.equals(this.name, agency.name) &&
        Objects.equals(this.chainName, agency.chainName) &&
        Objects.equals(this.parent, agency.parent) &&
        Objects.equals(this.trafficFileNumber, agency.trafficFileNumber) &&
        Objects.equals(this.tradeLicense, agency.tradeLicense) &&
        Objects.equals(this.category, agency.category) &&
        Objects.equals(this.imageUrl, agency.imageUrl) &&
        Objects.equals(this.status, agency.status) &&
        Objects.equals(this.isActive, agency.isActive) &&
        Objects.equals(this.isArchived, agency.isArchived) &&
        Objects.equals(this.createdBy, agency.createdBy) &&
        Objects.equals(this.updatedBy, agency.updatedBy) &&
        Objects.equals(this.createdAt, agency.createdAt) &&
        Objects.equals(this.updatedAt, agency.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, did, source, sourceKey, versionHash, name, chainName, parent, trafficFileNumber, tradeLicense, category, imageUrl, status, isActive, isArchived, createdBy, updatedBy, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Agency {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    did: ").append(toIndentedString(did)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceKey: ").append(toIndentedString(sourceKey)).append("\n");
    sb.append("    versionHash: ").append(toIndentedString(versionHash)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    chainName: ").append(toIndentedString(chainName)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    trafficFileNumber: ").append(toIndentedString(trafficFileNumber)).append("\n");
    sb.append("    tradeLicense: ").append(toIndentedString(tradeLicense)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("did");
    openapiFields.add("source");
    openapiFields.add("sourceKey");
    openapiFields.add("versionHash");
    openapiFields.add("name");
    openapiFields.add("chainName");
    openapiFields.add("parent");
    openapiFields.add("trafficFileNumber");
    openapiFields.add("tradeLicense");
    openapiFields.add("category");
    openapiFields.add("imageUrl");
    openapiFields.add("status");
    openapiFields.add("isActive");
    openapiFields.add("isArchived");
    openapiFields.add("createdBy");
    openapiFields.add("updatedBy");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Agency
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Agency.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Agency is not found in the empty JSON string", Agency.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Agency.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Agency` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("did") != null && !jsonObj.get("did").isJsonNull()) && !jsonObj.get("did").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `did` to be a primitive type in the JSON string but got `%s`", jsonObj.get("did").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("sourceKey") != null && !jsonObj.get("sourceKey").isJsonNull()) && !jsonObj.get("sourceKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceKey").toString()));
      }
      if ((jsonObj.get("versionHash") != null && !jsonObj.get("versionHash").isJsonNull()) && !jsonObj.get("versionHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionHash").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        MultiLang.validateJsonObject(jsonObj.getAsJsonObject("name"));
      }
      // validate the optional field `chainName`
      if (jsonObj.get("chainName") != null && !jsonObj.get("chainName").isJsonNull()) {
        MultiLang.validateJsonObject(jsonObj.getAsJsonObject("chainName"));
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        AgencyHeader.validateJsonObject(jsonObj.getAsJsonObject("parent"));
      }
      if ((jsonObj.get("trafficFileNumber") != null && !jsonObj.get("trafficFileNumber").isJsonNull()) && !jsonObj.get("trafficFileNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trafficFileNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trafficFileNumber").toString()));
      }
      // validate the optional field `tradeLicense`
      if (jsonObj.get("tradeLicense") != null && !jsonObj.get("tradeLicense").isJsonNull()) {
        TradeLicense.validateJsonObject(jsonObj.getAsJsonObject("tradeLicense"));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) && !jsonObj.get("updatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Agency.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Agency' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Agency> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Agency.class));

       return (TypeAdapter<T>) new TypeAdapter<Agency>() {
           @Override
           public void write(JsonWriter out, Agency value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Agency read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Agency given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Agency
  * @throws IOException if the JSON string is invalid with respect to Agency
  */
  public static Agency fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Agency.class);
  }

 /**
  * Convert an instance of Agency to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

