/*
 * Agency
 * Manage Agency Information 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Agency;
import org.openapitools.client.model.AgencyRemarks;
import org.openapitools.client.model.AgencyWithDetails;
import org.openapitools.client.model.AgencyWithTransactions;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.SimCard;
import org.openapitools.client.model.SimCardResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AgencyApi
 */
@Disabled
public class AgencyApiTest {

    private final AgencyApi api = new AgencyApi();

    /**
     * Block agency
     *
     * Block agency
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockAgencyTest() throws ApiException {
        String xIBMClientId = null;
        String authorization = null;
        String agencyDid = null;
        AgencyRemarks request = null;
        String xIBMClientSecret = null;
        api.blockAgency(xIBMClientId, authorization, agencyDid, request, xIBMClientSecret);
        // TODO: test validations
    }

    /**
     * Delete an agency from TARS
     *
     * Delete an agency from TARS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAgencyTest() throws ApiException {
        String xIBMClientId = null;
        String authorization = null;
        String did = null;
        String xIBMClientSecret = null;
        String response = api.deleteAgency(xIBMClientId, authorization, did, xIBMClientSecret);
        // TODO: test validations
    }

    /**
     * Fetch an agency in TARS
     *
     * Fetch an agency in TARS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAgencyDetailsTest() throws ApiException {
        String xIBMClientId = null;
        String authorization = null;
        String did = null;
        String xIBMClientSecret = null;
        AgencyWithDetails response = api.retrieveAgencyDetails(xIBMClientId, authorization, did, xIBMClientSecret);
        // TODO: test validations
    }

    /**
     * Fetch an agency in TARS
     *
     * Fetch an agency in TARS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAgencyMastersTest() throws ApiException {
        String xIBMClientId = null;
        String authorization = null;
        String did = null;
        String xIBMClientSecret = null;
        Agency response = api.retrieveAgencyMasters(xIBMClientId, authorization, did, xIBMClientSecret);
        // TODO: test validations
    }

    /**
     * Fetch an agency by ID
     *
     * Fetch an agency by Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAgencyTransactionsTest() throws ApiException {
        String xIBMClientId = null;
        String authorization = null;
        String did = null;
        String xIBMClientSecret = null;
        AgencyWithTransactions response = api.retrieveAgencyTransactions(xIBMClientId, authorization, did, xIBMClientSecret);
        // TODO: test validations
    }

    /**
     * Unblock agency
     *
     * Unblock agency
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unblockAgencyTest() throws ApiException {
        String xIBMClientId = null;
        String authorization = null;
        String agencyDid = null;
        AgencyRemarks request = null;
        String xIBMClientSecret = null;
        api.unblockAgency(xIBMClientId, authorization, agencyDid, request, xIBMClientSecret);
        // TODO: test validations
    }

    /**
     * Update an agency in TARS
     *
     * Update an agency in TARS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAgencyTest() throws ApiException {
        String xIBMClientId = null;
        String authorization = null;
        String did = null;
        Agency updateAgency = null;
        String xIBMClientSecret = null;
        Agency response = api.updateAgency(xIBMClientId, authorization, did, updateAgency, xIBMClientSecret);
        // TODO: test validations
    }

    /**
     * Update agency details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAgencyContactsTest() throws ApiException {
        String xIBMClientId = null;
        String authorization = null;
        String did = null;
        String xIBMClientSecret = null;
        Contact requestBody = null;
        Contact response = api.updateAgencyContacts(xIBMClientId, authorization, did, xIBMClientSecret, requestBody);
        // TODO: test validations
    }

    /**
     * Update agency details by sync
     *
     * Update agency details by sync
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAgencySyncByDidTest() throws ApiException {
        String xIBMClientId = null;
        String authorization = null;
        String did = null;
        String xIBMClientSecret = null;
        AgencyWithDetails response = api.updateAgencySyncByDid(xIBMClientId, authorization, did, xIBMClientSecret);
        // TODO: test validations
    }

    /**
     * Update newly created/existing organizations sim card received status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSimStatusTest() throws ApiException {
        String xIBMClientId = null;
        String authorization = null;
        String xIBMClientSecret = null;
        SimCard requestBody = null;
        SimCardResponse response = api.updateSimStatus(xIBMClientId, authorization, xIBMClientSecret, requestBody);
        // TODO: test validations
    }

}
